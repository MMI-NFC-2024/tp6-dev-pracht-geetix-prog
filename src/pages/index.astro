---
import penguins from "../assets/penguins.json";
import cars from "../assets/cars.json";
export const prerender = false;
import PlotFigure from "../components/PlotFigure.astro";
import * as Plot from "@observablehq/plot";
import Layout from "../layouts/Layout.astro";

const { species } = Astro.params;

const filteredPenguins = species 
  ? penguins.filter((penguin) => penguin.species === species)
  : penguins;

const allSpecies = [...new Set(penguins.map(p => p.species))];

// Donn√©es des voitures
const { year } = Astro.params;
const filteredCars = year 
  ? cars.filter((car) => car.year === parseInt(year))
  : cars;

const allYears = [...new Set(cars.map(c => c.year).filter(Boolean))].sort((a, b) => a - b);

// Filtrer les voitures avec des donn√©es valides pour le graphique
const safeCars = filteredCars.filter(car => 
  car["power (hp)"] != null && car["weight (lb)"] != null
);

const plotOptions = {
  grid: true,
  marks: [
    Plot.dot(filteredPenguins, {
      x: "culmen_length_mm",
      y: "culmen_depth_mm",
      fill: species ? "steelblue" : "species",
      r: 4,
      fillOpacity: 0.7,
    }),
  ],
  x: {
    label: "Longueur du bec (mm)",
  },
  y: {
    label: "Profondeur du bec (mm)",
  },
  title: species 
    ? `Relation Longueur vs Profondeur du bec - ${species}` 
    : "Relation Longueur vs Profondeur du bec - Tous les pingouins",
};

// Options de graphique pour les voitures
const carsPlotOptions = {
  grid: true,
  marks: [
    Plot.dot(safeCars, {
      x: "weight (lb)",
      y: "power (hp)",
      fill: year ? "orange" : "year",
      r: 4,
      fillOpacity: 0.7,
    }),
  ],
  x: {
    label: "Poids (lb)",
  },
  y: {
    label: "Puissance (hp)",
  },
  title: year 
    ? `Relation Puissance vs Poids - Voitures ${year}` 
    : "Relation Puissance vs Poids - Toutes les voitures",
};
---

<Layout>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
        {species ? `Pingouins ${species}` : year ? `Voitures ${year}` : "Analyse des Donn√©es"}
      </h1>
      <p class="text-xl text-gray-600 mb-8">
        {species 
          ? `${filteredPenguins.length} pingouin(s) de l'esp√®ce ${species}` 
          : year
            ? `${filteredCars.length} voiture(s) de l'ann√©e ${year}`
            : `Explorez les donn√©es de ${filteredPenguins.length} pingouins et ${cars.length} voitures`
        }
      </p>
    </div>

    {!species && (
      <div class="mb-12">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-6 border border-blue-200">
            <div class="flex items-center mb-4">
              <div class="w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center mr-4">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-lg font-semibold text-gray-900">Rendu Dynamique</h3>
                <p class="text-sm text-gray-600">Pages g√©n√©r√©es √† la demande</p>
              </div>
            </div>
            <p class="text-gray-700 mb-4">
              Id√©al pour du contenu qui change fr√©quemment. Utilise <code class="bg-blue-200 px-2 py-1 rounded text-sm">prerender = false</code>.
            </p>
            <a 
              href="/rendu-dynamique/" 
              class="inline-flex items-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200"
            >
              üöÄ Explorer le rendu dynamique
              <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>

          <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-6 border border-green-200">
            <div class="flex items-center mb-4">
              <div class="w-12 h-12 bg-green-600 rounded-lg flex items-center justify-center mr-4">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-lg font-semibold text-gray-900">Rendu Statique</h3>
                <p class="text-sm text-gray-600">Pages pr√©-g√©n√©r√©es au build</p>
              </div>
            </div>
            <p class="text-gray-700 mb-4">
              Performances optimales et SEO parfait. Utilise <code class="bg-green-200 px-2 py-1 rounded text-sm">getStaticPaths()</code>.
            </p>
            <a 
              href="/rendu-statique/" 
              class="inline-flex items-center bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200"
            >
              ‚ö° Explorer le rendu statique
              <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    )}

    <div class="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
      <div class="mb-4">
        <h2 class="text-2xl font-semibold text-gray-900 mb-2">
          {species ? `Analyse de l'esp√®ce ${species}` : "Vue d'ensemble de toutes les esp√®ces"}
        </h2>
        <p class="text-gray-600">
          Relation entre la longueur et la profondeur du bec des pingouins
        </p>
      </div>
      <PlotFigure options={plotOptions} />
    </div>

    <!-- Section pour les voitures -->
    <div class="bg-white rounded-lg shadow-lg border border-gray-200 p-6 mt-8">
      <div class="mb-4">
        <h2 class="text-2xl font-semibold text-gray-900 mb-2">
          {year ? `Analyse de l'ann√©e ${year}` : "Vue d'ensemble de toutes les ann√©es"}
        </h2>
        <p class="text-gray-600">
          Relation entre la puissance et le poids des voitures
        </p>
        <p class="text-sm text-gray-500 mt-2">
          {year
            ? `${filteredCars.length} voiture(s) de l'ann√©e ${year}` 
            : `${cars.length} voitures au total (${safeCars.length} avec donn√©es compl√®tes)`
          }
        </p>
      </div>
      <PlotFigure options={carsPlotOptions} />
    </div>

    {species && (
      <div class="mt-8 text-center">
        <a 
          href="/" 
          class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Retour √† la vue d'ensemble
        </a>
      </div>
    )}

    {year && (
      <div class="mt-8 text-center">
        <a 
          href="/" 
          class="inline-flex items-center text-orange-600 hover:text-orange-800 font-medium"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Retour √† la vue d'ensemble des voitures
        </a>
      </div>
    )}
  </div>
</Layout>
